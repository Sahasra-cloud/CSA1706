import heapq

# Goal state
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]

# Movement directions: up, down, left, right
moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]

def manhattan_distance(state):
    """Calculate Manhattan distance of a state from goal state."""
    distance = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                goal_x = (val - 1) // 3
                goal_y = (val - 1) % 3
                distance += abs(i - goal_x) + abs(j - goal_y)
    return distance

def is_valid(x, y):
    return 0 <= x < 3 and 0 <= y < 3

def serialize(state):
    return tuple(tuple(row) for row in state)

def find_zero(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def get_neighbors(state):
    neighbors = []
    x, y = find_zero(state)
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if is_valid(nx, ny):
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

def a_star(start_state):
    pq = []
    heapq.heappush(pq, (manhattan_distance(start_state), 0, start_state, []))
    visited = set()

    while pq:
        f, g, state, path = heapq.heappop(pq)
        if state == goal_state:
            return path + [state]

        serialized = serialize(state)
        if serialized in visited:
            continue
        visited.add(serialized)

        for neighbor in get_neighbors(state):
            if serialize(neighbor) not in visited:
                heapq.heappush(pq, (
                    g + 1 + manhattan_distance(neighbor),
                    g + 1,
                    neighbor,
                    path + [state]
                ))
    return None

def print_path(path):
    for step in path:
        for row in step:
            print(row)
        print("----------")

if __name__ == "__main__":
    # Example start state (0 is the blank tile)
    start_state = [[1, 2, 3],
                   [4, 0, 6],
                   [7, 5, 8]]

    solution = a_star(start_state)

    if solution:
        print(f"Solution found in {len(solution) - 1} moves:\n")
        print_path(solution)
    else:
        print("No solution found.")
