# Alpha-Beta Pruning implementation

def alpha_beta_pruning(depth, node_index, maximizing_player, values, alpha, beta):
    # Terminal node (leaf)
    if depth == 3:
        return values[node_index]

    if maximizing_player:
        max_eval = float('-inf')
        for i in range(2):  # 2 children for each node
            eval = alpha_beta_pruning(depth + 1, node_index * 2 + i, False, values, alpha, beta)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)

            # Prune
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(2):  # 2 children for each node
            eval = alpha_beta_pruning(depth + 1, node_index * 2 + i, True, values, alpha, beta)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)

            # Prune
            if beta <= alpha:
                break
        return min_eval

# Example leaf node values (binary tree with depth = 3 â†’ 8 leaf nodes)
values = [3, 5, 6, 9, 1, 2, 0, -1]

# Initial call to alpha-beta pruning
optimal_value = alpha_beta_pruning(0, 0, True, values, float('-inf'), float('inf'))

print("Optimal Value (with Alpha-Beta Pruning):", optimal_value)
